function [methodinfo,structs,enuminfo,ThunkLibName]=mxepanet
%MXEPANET Create structures to define interfaces found in 'epanet2'.

%This function was generated by loadlibrary.m parser version  on Thu Jul 14 21:33:43 2022
%perl options:'epanet2.i -outfile=mxepanet.m -thunkfile=epanet2_thunk_pcwin64.c -header=epanet2.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'epanet2_thunk_pcwin64');
% int  _stdcall  EN_createproject ( EN_Project * ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_createproject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtrPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deleteproject ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_deleteproject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_runproject ( EN_Project ph , const char * inpFile , const char * rptFile , const char * outFile , void (* pviewprog )( char *)); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='EN_runproject'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'cstring', 'cstring', 'FcnPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_init ( EN_Project ph , const char * rptFile , const char * outFile , int unitsType , int headLossType ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringint32int32Thunk';fcns.name{fcnNum}='EN_init'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_open ( EN_Project ph , const char * inpFile , const char * rptFile , const char * outFile ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringThunk';fcns.name{fcnNum}='EN_open'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_gettitle ( EN_Project ph , char * out_line1 , char * out_line2 , char * out_line3 ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringThunk';fcns.name{fcnNum}='EN_gettitle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_settitle ( EN_Project ph , char * line1 , char * line2 , char * line3 ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringcstringThunk';fcns.name{fcnNum}='EN_settitle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcomment ( EN_Project ph , int object , int index , char * out_comment ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringThunk';fcns.name{fcnNum}='EN_getcomment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setcomment ( EN_Project ph , int object , int index , char * comment ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringThunk';fcns.name{fcnNum}='EN_setcomment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcount ( EN_Project ph , int object , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getcount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_saveinpfile ( EN_Project ph , const char * filename ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_saveinpfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_close ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_solveH ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_solveH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_usehydfile ( EN_Project ph , const char * filename ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_usehydfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_openH ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_openH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_initH ( EN_Project ph , int initFlag ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_initH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_runH ( EN_Project ph , long * currentTime ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_runH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_nextH ( EN_Project ph , long * tStep ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_nextH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_saveH ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_saveH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_savehydfile ( EN_Project ph , const char * filename ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_savehydfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_closeH ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_closeH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_solveQ ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_solveQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_openQ ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_openQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_initQ ( EN_Project ph , int saveFlag ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_initQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_runQ ( EN_Project ph , long * currentTime ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_runQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_nextQ ( EN_Project ph , long * tStep ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_nextQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_stepQ ( EN_Project ph , long * timeLeft ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_stepQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_closeQ ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_closeQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_writeline ( EN_Project ph , char * line ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_writeline'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_report ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_report'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_copyreport ( EN_Project ph , char * filename ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_copyreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_clearreport ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_clearreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_resetreport ( EN_Project ph ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_resetreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setreport ( EN_Project ph , char * format ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_setreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setstatusreport ( EN_Project ph , int level ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_setstatusreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getversion ( int * version ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='EN_getversion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_geterror ( int errcode , char * out_errmsg , int maxLen ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='EN_geterror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getstatistic ( EN_Project ph , int type , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getstatistic'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getresultindex ( EN_Project ph , int type , int index , int * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='EN_getresultindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getoption ( EN_Project ph , int option , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getoption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setoption ( EN_Project ph , int option , double value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='EN_setoption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getflowunits ( EN_Project ph , int * units ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getflowunits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setflowunits ( EN_Project ph , int units ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_setflowunits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_gettimeparam ( EN_Project ph , int param , long * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_gettimeparam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_settimeparam ( EN_Project ph , int param , long value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32longThunk';fcns.name{fcnNum}='EN_settimeparam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getqualinfo ( EN_Project ph , int * qualType , char * out_chemName , char * out_chemUnits , int * traceNode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringcstringvoidPtrThunk';fcns.name{fcnNum}='EN_getqualinfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32Ptr', 'cstring', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getqualtype ( EN_Project ph , int * qualType , int * traceNode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getqualtype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setqualtype ( EN_Project ph , int qualType , char * chemName , char * chemUnits , char * traceNode ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringcstringcstringThunk';fcns.name{fcnNum}='EN_setqualtype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_addnode ( EN_Project ph , char * id , int nodeType , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32voidPtrThunk';fcns.name{fcnNum}='EN_addnode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deletenode ( EN_Project ph , int index , int actionCode ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='EN_deletenode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getnodeindex ( EN_Project ph , char * id , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='EN_getnodeindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getnodeid ( EN_Project ph , int index , char * out_id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_getnodeid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setnodeid ( EN_Project ph , int index , char * newid ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_setnodeid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getnodetype ( EN_Project ph , int index , int * nodeType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getnodetype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getnodevalue ( EN_Project ph , int index , int property , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='EN_getnodevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setnodevalue ( EN_Project ph , int index , int property , double value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubleThunk';fcns.name{fcnNum}='EN_setnodevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setjuncdata ( EN_Project ph , int index , double elev , double dmnd , char * dmndpat ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoublecstringThunk';fcns.name{fcnNum}='EN_setjuncdata'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_settankdata ( EN_Project ph , int index , double elev , double initlvl , double minlvl , double maxlvl , double diam , double minvol , char * volcurve ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoubledoubledoubledoubledoublecstringThunk';fcns.name{fcnNum}='EN_settankdata'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double', 'double', 'double', 'double', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcoord ( EN_Project ph , int index , double * x , double * y ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getcoord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setcoord ( EN_Project ph , int index , double x , double y ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoubleThunk';fcns.name{fcnNum}='EN_setcoord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getdemandmodel ( EN_Project ph , int * type , double * pmin , double * preq , double * pexp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getdemandmodel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setdemandmodel ( EN_Project ph , int type , double pmin , double preq , double pexp ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoubledoubleThunk';fcns.name{fcnNum}='EN_setdemandmodel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_adddemand ( EN_Project ph , int nodeIndex , double baseDemand , char * demandPattern , char * demandName ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doublecstringcstringThunk';fcns.name{fcnNum}='EN_adddemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deletedemand ( EN_Project ph , int nodeIndex , int demandIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='EN_deletedemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getdemandindex ( EN_Project ph , int nodeIndex , char * demandName , int * demandIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringvoidPtrThunk';fcns.name{fcnNum}='EN_getdemandindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getnumdemands ( EN_Project ph , int nodeIndex , int * numDemands ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getnumdemands'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getbasedemand ( EN_Project ph , int nodeIndex , int demandIndex , double * baseDemand ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='EN_getbasedemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setbasedemand ( EN_Project ph , int nodeIndex , int demandIndex , double baseDemand ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubleThunk';fcns.name{fcnNum}='EN_setbasedemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getdemandpattern ( EN_Project ph , int nodeIndex , int demandIndex , int * patIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='EN_getdemandpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setdemandpattern ( EN_Project ph , int nodeIndex , int demandIndex , int patIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='EN_setdemandpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getdemandname ( EN_Project ph , int nodeIndex , int demandIndex , char * out_demandName ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringThunk';fcns.name{fcnNum}='EN_getdemandname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setdemandname ( EN_Project ph , int nodeIndex , int demandIdx , char * demandName ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32cstringThunk';fcns.name{fcnNum}='EN_setdemandname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_addlink ( EN_Project ph , char * id , int linkType , char * fromNode , char * toNode , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='EN_addlink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'int32', 'cstring', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deletelink ( EN_Project ph , int index , int actionCode ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='EN_deletelink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getlinkindex ( EN_Project ph , char * id , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='EN_getlinkindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getlinkid ( EN_Project ph , int index , char * out_id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_getlinkid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setlinkid ( EN_Project ph , int index , char * newid ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_setlinkid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getlinktype ( EN_Project ph , int index , int * linkType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getlinktype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setlinktype ( EN_Project ph , int * inout_index , int linkType , int actionCode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='EN_setlinktype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getlinknodes ( EN_Project ph , int index , int * node1 , int * node2 ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getlinknodes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setlinknodes ( EN_Project ph , int index , int node1 , int node2 ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='EN_setlinknodes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getlinkvalue ( EN_Project ph , int index , int property , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='EN_getlinkvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setlinkvalue ( EN_Project ph , int index , int property , double value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubleThunk';fcns.name{fcnNum}='EN_setlinkvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpipedata ( EN_Project ph , int index , double length , double diam , double rough , double mloss ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubledoubledoubledoubleThunk';fcns.name{fcnNum}='EN_setpipedata'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getvertexcount ( EN_Project ph , int index , int * count ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getvertexcount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getvertex ( EN_Project ph , int index , int vertex , double * x , double * y ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getvertex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setvertices ( EN_Project ph , int index , double * x , double * y , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='EN_setvertices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getpumptype ( EN_Project ph , int linkIndex , int * pumpType ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getpumptype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getheadcurveindex ( EN_Project ph , int linkIndex , int * curveIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getheadcurveindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setheadcurveindex ( EN_Project ph , int linkIndex , int curveIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='EN_setheadcurveindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_addpattern ( EN_Project ph , char * id ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_addpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deletepattern ( EN_Project ph , int index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_deletepattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getpatternindex ( EN_Project ph , char * id , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='EN_getpatternindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getpatternid ( EN_Project ph , int index , char * out_id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_getpatternid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpatternid ( EN_Project ph , int index , char * id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_setpatternid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getpatternlen ( EN_Project ph , int index , int * len ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getpatternlen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getpatternvalue ( EN_Project ph , int index , int period , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrThunk';fcns.name{fcnNum}='EN_getpatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpatternvalue ( EN_Project ph , int index , int period , double value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubleThunk';fcns.name{fcnNum}='EN_setpatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getaveragepatternvalue ( EN_Project ph , int index , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getaveragepatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpattern ( EN_Project ph , int index , double * values , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='EN_setpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_addcurve ( EN_Project ph , char * id ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_addcurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deletecurve ( EN_Project ph , int index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_deletecurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcurveindex ( EN_Project ph , char * id , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='EN_getcurveindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcurveid ( EN_Project ph , int index , char * out_id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_getcurveid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setcurveid ( EN_Project ph , int index , char * id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_setcurveid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcurvelen ( EN_Project ph , int index , int * len ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getcurvelen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcurvetype ( EN_Project ph , int index , int * type ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='EN_getcurvetype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcurvevalue ( EN_Project ph , int curveIndex , int pointIndex , double * x , double * y ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getcurvevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setcurvevalue ( EN_Project ph , int curveIndex , int pointIndex , double x , double y ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubledoubleThunk';fcns.name{fcnNum}='EN_setcurvevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcurve ( EN_Project ph , int index , char * out_id , int * nPoints , double * xValues , double * yValues ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getcurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring', 'int32Ptr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setcurve ( EN_Project ph , int index , double * xValues , double * yValues , int nPoints ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='EN_setcurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'doublePtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_addcontrol ( EN_Project ph , int type , int linkIndex , double setting , int nodeIndex , double level , int * index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubleint32doublevoidPtrThunk';fcns.name{fcnNum}='EN_addcontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double', 'int32', 'double', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deletecontrol ( EN_Project ph , int index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_deletecontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getcontrol ( EN_Project ph , int index , int * type , int * linkIndex , double * setting , int * nodeIndex , double * level ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getcontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setcontrol ( EN_Project ph , int index , int type , int linkIndex , double setting , int nodeIndex , double level ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32doubleint32doubleThunk';fcns.name{fcnNum}='EN_setcontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32', 'double', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_addrule ( EN_Project ph , char * rule ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='EN_addrule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_deleterule ( EN_Project ph , int index ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='EN_deleterule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getrule ( EN_Project ph , int index , int * nPremises , int * nThenActions , int * nElseActions , double * priority ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getrule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getruleID ( EN_Project ph , int index , char * out_id ); 
fcns.thunkname{fcnNum}='int32voidPtrint32cstringThunk';fcns.name{fcnNum}='EN_getruleID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getpremise ( EN_Project ph , int ruleIndex , int premiseIndex , int * logop , int * object , int * objIndex , int * variable , int * relop , int * status , double * value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getpremise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpremise ( EN_Project ph , int ruleIndex , int premiseIndex , int logop , int object , int objIndex , int variable , int relop , int status , double value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32int32int32int32int32doubleThunk';fcns.name{fcnNum}='EN_setpremise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpremiseindex ( EN_Project ph , int ruleIndex , int premiseIndex , int objIndex ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='EN_setpremiseindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpremisestatus ( EN_Project ph , int ruleIndex , int premiseIndex , int status ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32Thunk';fcns.name{fcnNum}='EN_setpremisestatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setpremisevalue ( EN_Project ph , int ruleIndex , int premiseIndex , double value ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32doubleThunk';fcns.name{fcnNum}='EN_setpremisevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getthenaction ( EN_Project ph , int ruleIndex , int actionIndex , int * linkIndex , int * status , double * setting ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getthenaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setthenaction ( EN_Project ph , int ruleIndex , int actionIndex , int linkIndex , int status , double setting ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32doubleThunk';fcns.name{fcnNum}='EN_setthenaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_getelseaction ( EN_Project ph , int ruleIndex , int actionIndex , int * linkIndex , int * status , double * setting ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='EN_getelseaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setelseaction ( EN_Project ph , int ruleIndex , int actionIndex , int linkIndex , int status , double setting ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32int32int32doubleThunk';fcns.name{fcnNum}='EN_setelseaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'int32', 'int32', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  EN_setrulepriority ( EN_Project ph , int index , double priority ); 
fcns.thunkname{fcnNum}='int32voidPtrint32doubleThunk';fcns.name{fcnNum}='EN_setrulepriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ProjectPtr', 'int32', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  ENepanet ( const char * inpFile , const char * rptFile , const char * outFile , void (* pviewprog ) ( char *)); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='ENepanet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'FcnPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENinit ( const char * rptFile , const char * outFile , int unitsType , int headlossType ); 
fcns.thunkname{fcnNum}='int32cstringcstringint32int32Thunk';fcns.name{fcnNum}='ENinit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENopen ( const char * inpFile , const char * rptFile , const char * outFile ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringThunk';fcns.name{fcnNum}='ENopen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgettitle ( char * line1 , char * line2 , char * line3 ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringThunk';fcns.name{fcnNum}='ENgettitle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsettitle ( char * line1 , char * line2 , char * line3 ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringThunk';fcns.name{fcnNum}='ENsettitle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcomment ( int object , int index , char * comment ); 
fcns.thunkname{fcnNum}='int32int32int32cstringThunk';fcns.name{fcnNum}='ENgetcomment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetcomment ( int object , int index , char * comment ); 
fcns.thunkname{fcnNum}='int32int32int32cstringThunk';fcns.name{fcnNum}='ENsetcomment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcount ( int object , int * count ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetcount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsaveinpfile ( const char * filename ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENsaveinpfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENclose (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENclose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENsolveH (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENsolveH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENsaveH (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENsaveH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENopenH (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENopenH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENinitH ( int initFlag ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENinitH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENrunH ( long * currentTime ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENrunH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENnextH ( long * tStep ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENnextH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENcloseH (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENcloseH'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENsavehydfile ( char * filename ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENsavehydfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENusehydfile ( char * filename ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENusehydfile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsolveQ (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENsolveQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENopenQ (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENopenQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENinitQ ( int saveFlag ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENinitQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENrunQ ( long * currentTime ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENrunQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENnextQ ( long * tStep ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENnextQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENstepQ ( long * timeLeft ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENstepQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENcloseQ (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENcloseQ'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENwriteline ( char * line ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENwriteline'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENreport (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENcopyreport ( char * filename ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENcopyreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENclearreport (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENclearreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENresetreport (); 
fcns.thunkname{fcnNum}='int32Thunk';fcns.name{fcnNum}='ENresetreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int  _stdcall  ENsetreport ( char * format ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENsetreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetstatusreport ( int level ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENsetstatusreport'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetversion ( int * version ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENgetversion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgeterror ( int errcode , char * errmsg , int maxLen ); 
fcns.thunkname{fcnNum}='int32int32cstringint32Thunk';fcns.name{fcnNum}='ENgeterror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetstatistic ( int type , float * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetstatistic'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetresultindex ( int type , int index , int * value ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetresultindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetoption ( int option , float * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetoption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetoption ( int option , float value ); 
fcns.thunkname{fcnNum}='int32int32floatThunk';fcns.name{fcnNum}='ENsetoption'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetflowunits ( int * units ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='ENgetflowunits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetflowunits ( int units ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENsetflowunits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgettimeparam ( int param , long * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgettimeparam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'longPtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsettimeparam ( int param , long value ); 
fcns.thunkname{fcnNum}='int32int32longThunk';fcns.name{fcnNum}='ENsettimeparam'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'long'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetqualinfo ( int * qualType , char * chemName , char * chemUnits , int * traceNode ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringcstringvoidPtrThunk';fcns.name{fcnNum}='ENgetqualinfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetqualtype ( int * qualType , int * traceNode ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetqualtype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetqualtype ( int qualType , char * chemName , char * chemUnits , char * traceNode ); 
fcns.thunkname{fcnNum}='int32int32cstringcstringcstringThunk';fcns.name{fcnNum}='ENsetqualtype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENaddnode ( char * id , int nodeType , int * index ); 
fcns.thunkname{fcnNum}='int32cstringint32voidPtrThunk';fcns.name{fcnNum}='ENaddnode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeletenode ( int index , int actionCode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ENdeletenode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetnodeindex ( char * id , int * index ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='ENgetnodeindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetnodeid ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENgetnodeid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetnodeid ( int index , char * newid ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENsetnodeid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetnodetype ( int index , int * nodeType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetnodetype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetnodevalue ( int index , int property , float * value ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetnodevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetnodevalue ( int index , int property , float value ); 
fcns.thunkname{fcnNum}='int32int32int32floatThunk';fcns.name{fcnNum}='ENsetnodevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetjuncdata ( int index , float elev , float dmnd , char * dmndpat ); 
fcns.thunkname{fcnNum}='int32int32floatfloatcstringThunk';fcns.name{fcnNum}='ENsetjuncdata'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'single', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsettankdata ( int index , float elev , float initlvl , float minlvl , float maxlvl , float diam , float minvol , char * volcurve ); 
fcns.thunkname{fcnNum}='int32int32floatfloatfloatfloatfloatfloatcstringThunk';fcns.name{fcnNum}='ENsettankdata'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'single', 'single', 'single', 'single', 'single', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcoord ( int index , double * x , double * y ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetcoord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetcoord ( int index , double x , double y ); 
fcns.thunkname{fcnNum}='int32int32doubledoubleThunk';fcns.name{fcnNum}='ENsetcoord'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'double', 'double'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetdemandmodel ( int * model , float * pmin , float * preq , float * pexp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetdemandmodel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'singlePtr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetdemandmodel ( int model , float pmin , float preq , float pexp ); 
fcns.thunkname{fcnNum}='int32int32floatfloatfloatThunk';fcns.name{fcnNum}='ENsetdemandmodel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'single', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENadddemand ( int nodeIndex , float baseDemand , char * demandPattern , char * demandName ); 
fcns.thunkname{fcnNum}='int32int32floatcstringcstringThunk';fcns.name{fcnNum}='ENadddemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeletedemand ( int nodeIndex , int demandIndex ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ENdeletedemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetnumdemands ( int nodeIndex , int * numDemands ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetnumdemands'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetdemandindex ( int nodeIndex , char * demandName , int * demandIndex ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrThunk';fcns.name{fcnNum}='ENgetdemandindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetbasedemand ( int nodeIndex , int demandIndex , float * baseDemand ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetbasedemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetbasedemand ( int nodeIndex , int demandIndex , float baseDemand ); 
fcns.thunkname{fcnNum}='int32int32int32floatThunk';fcns.name{fcnNum}='ENsetbasedemand'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetdemandpattern ( int nodeIndex , int demandIndex , int * patIndex ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetdemandpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetdemandpattern ( int nodeIndex , int demandIndex , int patIndex ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='ENsetdemandpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetdemandname ( int nodeIndex , int demandIndex , char * demandName ); 
fcns.thunkname{fcnNum}='int32int32int32cstringThunk';fcns.name{fcnNum}='ENgetdemandname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetdemandname ( int nodeIndex , int demandIndex , char * demandName ); 
fcns.thunkname{fcnNum}='int32int32int32cstringThunk';fcns.name{fcnNum}='ENsetdemandname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENaddlink ( char * id , int linkType , char * fromNode , char * toNode , int * index ); 
fcns.thunkname{fcnNum}='int32cstringint32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='ENaddlink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32', 'cstring', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeletelink ( int index , int actionCode ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ENdeletelink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetlinkindex ( char * id , int * index ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='ENgetlinkindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetlinkid ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENgetlinkid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetlinkid ( int index , char * newid ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENsetlinkid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetlinktype ( int index , int * linkType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetlinktype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetlinktype ( int * index , int linkType , int actionCode ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='ENsetlinktype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetlinknodes ( int index , int * node1 , int * node2 ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetlinknodes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetlinknodes ( int index , int node1 , int node2 ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='ENsetlinknodes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetlinkvalue ( int index , int property , float * value ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetlinkvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetlinkvalue ( int index , int property , float value ); 
fcns.thunkname{fcnNum}='int32int32int32floatThunk';fcns.name{fcnNum}='ENsetlinkvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpipedata ( int index , float length , float diam , float rough , float mloss ); 
fcns.thunkname{fcnNum}='int32int32floatfloatfloatfloatThunk';fcns.name{fcnNum}='ENsetpipedata'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single', 'single', 'single', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetvertexcount ( int index , int * count ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetvertexcount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetvertex ( int index , int vertex , double * x , double * y ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetvertex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetvertices ( int index , double * x , double * y , int count ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ENsetvertices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'doublePtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetpumptype ( int linkIndex , int * pumpType ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetpumptype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetheadcurveindex ( int linkIndex , int * curveIndex ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetheadcurveindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetheadcurveindex ( int linkIndex , int curveIndex ); 
fcns.thunkname{fcnNum}='int32int32int32Thunk';fcns.name{fcnNum}='ENsetheadcurveindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENaddpattern ( char * id ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENaddpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeletepattern ( int index ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENdeletepattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetpatternindex ( char * id , int * index ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='ENgetpatternindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetpatternid ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENgetpatternid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpatternid ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENsetpatternid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetpatternlen ( int index , int * len ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetpatternlen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetpatternvalue ( int index , int period , float * value ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetpatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpatternvalue ( int index , int period , float value ); 
fcns.thunkname{fcnNum}='int32int32int32floatThunk';fcns.name{fcnNum}='ENsetpatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetaveragepatternvalue ( int index , float * value ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetaveragepatternvalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpattern ( int index , float * values , int len ); 
fcns.thunkname{fcnNum}='int32int32voidPtrint32Thunk';fcns.name{fcnNum}='ENsetpattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENaddcurve ( char * id ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENaddcurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeletecurve ( int index ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENdeletecurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcurveindex ( char * id , int * index ); 
fcns.thunkname{fcnNum}='int32cstringvoidPtrThunk';fcns.name{fcnNum}='ENgetcurveindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcurveid ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENgetcurveid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetcurveid ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENsetcurveid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcurvelen ( int index , int * len ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetcurvelen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcurvetype ( int index , int * type ); 
fcns.thunkname{fcnNum}='int32int32voidPtrThunk';fcns.name{fcnNum}='ENgetcurvetype'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcurvevalue ( int curveIndex , int pointIndex , float * x , float * y ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetcurvevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetcurvevalue ( int curveIndex , int pointIndex , float x , float y ); 
fcns.thunkname{fcnNum}='int32int32int32floatfloatThunk';fcns.name{fcnNum}='ENsetcurvevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcurve ( int index , char * id , int * nPoints , float * xValues , float * yValues ); 
fcns.thunkname{fcnNum}='int32int32cstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetcurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring', 'int32Ptr', 'singlePtr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetcurve ( int index , float * xValues , float * yValues , int nPoints ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='ENsetcurve'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'singlePtr', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENaddcontrol ( int type , int linkIndex , float setting , int nodeIndex , float level , int * index ); 
fcns.thunkname{fcnNum}='int32int32int32floatint32floatvoidPtrThunk';fcns.name{fcnNum}='ENaddcontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single', 'int32', 'single', 'int32Ptr'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeletecontrol ( int index ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENdeletecontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetcontrol ( int index , int * type , int * linkIndex , float * setting , int * nodeIndex , float * level ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetcontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'singlePtr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetcontrol ( int index , int type , int linkIndex , float setting , int nodeIndex , float level ); 
fcns.thunkname{fcnNum}='int32int32int32int32floatint32floatThunk';fcns.name{fcnNum}='ENsetcontrol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'single', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENaddrule ( char * rule ); 
fcns.thunkname{fcnNum}='int32cstringThunk';fcns.name{fcnNum}='ENaddrule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENdeleterule ( int index ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='ENdeleterule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetrule ( int index , int * nPremises , int * nThenActions , int * nElseActions , float * priority ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetrule'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetruleID ( int index , char * id ); 
fcns.thunkname{fcnNum}='int32int32cstringThunk';fcns.name{fcnNum}='ENgetruleID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetpremise ( int ruleIndex , int premiseIndex , int * logop , int * object , int * objIndex , int * variable , int * relop , int * status , float * value ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetpremise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpremise ( int ruleIndex , int premiseIndex , int logop , int object , int objIndex , int variable , int relop , int status , float value ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32int32int32int32int32floatThunk';fcns.name{fcnNum}='ENsetpremise'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpremiseindex ( int ruleIndex , int premiseIndex , int objIndex ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='ENsetpremiseindex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpremisestatus ( int ruleIndex , int premiseIndex , int status ); 
fcns.thunkname{fcnNum}='int32int32int32int32Thunk';fcns.name{fcnNum}='ENsetpremisestatus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetpremisevalue ( int ruleIndex , int premiseIndex , float value ); 
fcns.thunkname{fcnNum}='int32int32int32floatThunk';fcns.name{fcnNum}='ENsetpremisevalue'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetthenaction ( int ruleIndex , int actionIndex , int * linkIndex , int * status , float * setting ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetthenaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetthenaction ( int ruleIndex , int actionIndex , int linkIndex , int status , float setting ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32floatThunk';fcns.name{fcnNum}='ENsetthenaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENgetelseaction ( int ruleIndex , int actionIndex , int * linkIndex , int * status , float * setting ); 
fcns.thunkname{fcnNum}='int32int32int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='ENgetelseaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'singlePtr'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetelseaction ( int ruleIndex , int actionIndex , int linkIndex , int status , float setting ); 
fcns.thunkname{fcnNum}='int32int32int32int32int32floatThunk';fcns.name{fcnNum}='ENsetelseaction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'single'};fcnNum=fcnNum+1;
% int  _stdcall  ENsetrulepriority ( int index , float priority ); 
fcns.thunkname{fcnNum}='int32int32floatThunk';fcns.name{fcnNum}='ENsetrulepriority'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'single'};fcnNum=fcnNum+1;
structs.Project.members=struct('');
methodinfo=fcns;